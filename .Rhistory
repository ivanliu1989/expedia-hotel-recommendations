if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
A <- matrix(c(1,2,3,4),nrow = 2, byrow = T)
B <- matrix(c(3,4,5,6),nrow = 2, byrow = T)
a <- c(1,2)
b <- c(2,3)
diag(10)
A
B
A*B
A%*%B
A%o%B # AB' A%*%t(B)
crossprod(A,B) # A'B  t(A)%*%A
crossprod(A) # A'A
b
solve(A,b) # A%*%solve(A,b)
solve(A,a) # A%*%solve(A,b)
a <- c(1200:1300)
a
b <- seq(15,100,5)
b
a/b
c <- a/b
c
a/15
apply(b, f(x) a/x)
apply(b, f(x){a/x})
sapply(b, f(x){a/x})
sapply(b, f(x){a/x})
lapply(b, f(x){a/x})
lapply(b, f(x)a/x)
lapply(b, f(x) a/x)
lapply(b,
f(x){
a/x
}
)
?sapply
b
sapply(b, a/x)
sapply(b, mean)
sapply(b, function(x) a/x)
a
x <âˆ’ c ( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c(9:20,1:5,3:7,0:8)
x
(xu<-x[!duplicated(x)])
unique ( x ) # i s more e f f i c i e n t
x[!duplicated(x)]
gc()
?setdiff
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
union(x, y)
intersect(x, y)
setdiff(y, x)
setequal(x, y)
library(xgboost)
?xgb.train
setwd('/Users/ivanliu/Downloads/Expedia_kaggle/expedia-hotel-recommendations')
library(data.table)
train <- fread('../data/train.csv')
test <- fread('../data/test.csv')
destination <- fread('../data/destinations.csv')
submit <- fread('../data/sample_submission.csv')
train
test
destination
submit
log(0.25)
log(0.5)
log(0.5)*-0.5
log(0.25)*-0.25
log(0.8)*-0.8
log(0.2)*-0.2
log(3/5)*-(3/5)
log(3/5)*-(3/5) + log(2/5)*-(2/5)
log(1)*-(1)
log(3/5)*-(3/5) + log(2/5)*-(2/5)
log(15/17)*-(15/17) + log(2/17)*-(2/17)
log(3/5)*-(3/5) + log(2/5)*-(2/5)
log(105/195)*-(105/195) + log(55/195)*-(55/195) + log(35/195)*-(35/195)
ln(105/195)*-(105/195) + log(55/195)*-(55/195) + log(35/195)*-(35/195)
log(105/195)*-(105/195)
log(55/195)*-(55/195)
log(35/195)*-(35/195)
log(105/195)*-(105/195)
-log(55/195)*(55/195)
log(105/195)*-(105/195)
-log(105/195)*(105/195)
-log(105/195)*(105/195) + -log(55/195)*(55/195) + log(35/195)*-(35/195)
log(15/17)*-(15/17) + log(2/17)*-(2/17)
log(15/17)*-(15/17)
log(2/17)*-(2/17)
train
train
table(train[,hotel_cluster])
plot(table(train[,hotel_cluster]))
table(unique(test[,user_id]) %in% unique(train[,user_id]))
train
a <- as.IDate(train[,date_time])
a
train
head(a)
train_sample <- train[1:10000]
train_sample
train_sample[,srch_date := as.IDate(date_time)]
train_sample[,srch_time := as.ITime(date_time)]
train_sample
strsplit(train_sample[,date_time], ' ')
train_sample[,.(srch_date, srch_time) := strsplit(date_time)]
train_sample[,c(srch_date, srch_time) := strsplit(date_time)]
train_sample[,c('srch_date', 'srch_time') := strsplit(date_time)]
train_sample[,c('srch_date', 'srch_time') := strsplit(date_time, ' ')]
?strsplit
train_sample[,c('srch_date', 'srch_time') := unlist(strsplit(date_time, ' '))]
train_sample[,c('srch_date', 'srch_time') := strsplit(date_time, ' ')[[1]]]
train_sample[,c('srch_date', 'srch_time') := tstrsplit(date_time, ' ', fixed=TRUE)]
?tstrsplit
??tstrsplit
train_sample[,c('srch_date', 'srch_time') := do.call(Map, c(f = c, strsplit(date_time, ' ')))]
train_sample
train_sample[,srch_date := as.IDate(srch_date)]
train_sample[,srch_time := as.ITime(srch_time)]
train_sample
train_sample[,srch_month := round(srch_date, 'months')]
train_sample
train_sample[,srch_month := format(as.Date(srch_date), "%b")]
train_sample
train_sample[,srch_year := format(as.Date(srch_date), "%y")]
train_sample
train_sample[,srch_month := month(srch_date)]
train_sample
train_sample[,srch_wday := wday(srch_date)]
train_sample
train_sample[,srch_hour := hour(srch_time)]
train_sample
train_sample[,srch_ci := as.IDate(srch_ci)] #srch_ci
train_sample[,srch_co := as.IDate(srch_co)] #srch_co
train_sample <- train[is_booking == 1]
dim(train_sample)
dim(train)
train_sample[,c('srch_date', 'srch_time') := do.call(Map, c(f = c, strsplit(date_time, ' ')))]
train_sample[,srch_date := as.IDate(srch_date)] #date
train_sample[,srch_time := as.ITime(srch_time)] #time
train_sample[,srch_month := month(srch_date)] #month
train_sample[,srch_year := year(srch_date)] #year
train_sample[,srch_wday := wday(srch_date)] #weekdays
train_sample[,srch_hour := hour(srch_time)] #hour
train_sample[,srch_ci := as.IDate(srch_ci)] #srch_ci
train_sample[,srch_co := as.IDate(srch_co)] #srch_co
train_sample
destination
train_sample
apply(train_sample, 2, FUN = function(x) mean(is.na(x)))
train_sample[is.na(orig_destination_distance)]
train_sample[is.na(orig_destination_distance), orig_destination_distance = -1]
train_sample[is.na(orig_destination_distance), orig_destination_distance := -1]
train_sample[orig_destination_distance]
train_sample
train_sample[,orig_destination_distance]
apply(train_sample, 2, FUN = function(x) mean(is.na(x)))
train_sample[,srch_qtr := quarter(srch_date)] #quarter
train_sample
train_sample[,srch_ci_month := month(srch_ci)] #month
train_sample[,srch_ci_year := year(srch_ci)] #year
train_sample[,srch_ci_qtr := quarter(srch_ci)] #quarter
train_sample[,srch_ci_mday := mday(srch_ci)] #monthdays
train_sample[,srch_ci_wday := wday(srch_ci)] #weekdays
train_sample[,srch_co_month := month(srch_co)] #month
train_sample[,srch_co_year := year(srch_co)] #year
train_sample[,srch_co_qtr := quarter(srch_co)] #quarter
train_sample[,srch_co_mday := mday(srch_co)] #monthdays
train_sample[,srch_co_wday := wday(srch_co)] #weekdays
train_sample
destination
dim(train_sample)
train_sample <- merge(train_sample, destination, by = 'srch_destination_id', all.x = T)
dim(train_sample)
train_sample[,len_of_stay := srch_co - srch_ci]
train_sample
train_sample[,len_of_stay := as.numeric(srch_co - srch_ci)]
train_sample
train_sample[,srch_in_advance := as.numeric(srch_ci - srch_date)]
train_sample
apply(train_sample, 2, FUN = function(x) mean(is.na(x)))
table(train_sample[,d119])
range(train_sample[,d119])
range(train_sample[,d119], na.rm = T)
range(train_sample[,d118], na.rm = T)
train_sample
match_cols <- c('user_location_country', 'user_location_region', 'user_location_city', 'hotel_market', 'orig_destination_distance')
train_sample
r = 1
book_year <- train_sample[r, srch_year]
book_year
user_location_city <- train_sample[r, user_location_city]
orig_destination_distance <- train_sample[r, orig_destination_distance]
srch_destination_id <- train_sample[r, srch_destination_id]
is_booking <- train_sample[r, is_booking]
hotel_country <- train_sample[r, hotel_country]
hotel_market <- train_sample[r, hotel_market]
hotel_cluster <- train_sample[r, hotel_cluster]
hotel_cluster
append_1 <- 3 + 17 * is_booking
append_2 <- 1 + 5 * is_booking
append_1
append_2
!is.na(user_location_city)
best_hotels_od_ulc <- as.data.frame(user_location_city = 1, orig_destination_distance = 1, hotel_cluster = 1, cnt = 1)
best_hotels_od_ulc <- data.frame(user_location_city = 1, orig_destination_distance = 1, hotel_cluster = 1, cnt = 1)
best_hotels_od_ulc
best_hotels_od_ulc <- rbind(best_hotels_od_ulc, c(user_location_city, orig_destination_distance, hotel_cluster, 1))
best_hotels_od_ulc
best_hotels_search_dest <- data.frame(srch_destination_id, hotel_country, hotel_market, hotel_cluster, cnt)
best_hotels_search_dest <- data.frame(srch_destination_id = 1, hotel_country = 1, hotel_market = 1, hotel_cluster = 1, cnt = 1)
best_hotels_search_dest
if(!is.na(srch_destination_id)&!is.na(hotel_country)&!is.na(hotel_market)&book_year==2014)
best_hotels_search_dest <- rbind(best_hotels_search_dest, c(srch_destination_id, hotel_country, hotel_market, hotel_cluster, 1))
best_hotels_search_dest
book_year
best_hotels_search_dest1 <- data.frame(srch_destination_id = 1, hotel_cluster = 1, cnt = 1)
if(!is.na(srch_destination_id))
best_hotels_search_dest <- rbind(best_hotels_search_dest1, c(srch_destination_id, hotel_cluster, append_1))
if(!is.na(srch_destination_id))
best_hotels_search_dest1 <- rbind(best_hotels_search_dest1, c(srch_destination_id, hotel_cluster, append_1))
best_hotels_search_dest1
dim(train)
1 % 1000
1 %% 1000
r %% 100000
append_1 <- 3 + 17 * is_booking
append_2 <- 1 + 5 * is_booking
best_hotels_od_ulc <- data.frame(user_location_city = -1, orig_destination_distance = -1, hotel_cluster = -1, score = -1)
best_hotels_search_dest <- data.frame(srch_destination_id = -1, hotel_country = -1, hotel_market = -1, hotel_cluster = -1, score = -1)
best_hotels_search_dest1 <- data.frame(srch_destination_id = -1, hotel_cluster = -1, score = -1)
best_hotel_country <- data.frame(hotel_country = -1, hotel_cluster = -1, score = -1)
popular_hotel_cluster <- data.frame(hotel_cluster = -1, score = -1)
# train mapping
for(r in 1:nrow(train)){
if(r %% 100000 == 0) cat(paste0(i, ' /n'))
book_year <- train_sample[r, srch_year]
user_location_city <- train_sample[r, user_location_city]
orig_destination_distance <- train_sample[r, orig_destination_distance]
srch_destination_id <- train_sample[r, srch_destination_id]
is_booking <- train_sample[r, is_booking]
hotel_country <- train_sample[r, hotel_country]
hotel_market <- train_sample[r, hotel_market]
hotel_cluster <- train_sample[r, hotel_cluster]
# 6.1 best_hotels_od_ulc
if(!is.na(user_location_city)&!is.na(orig_destination_distance))
best_hotels_od_ulc <- rbind(best_hotels_od_ulc, c(user_location_city, orig_destination_distance, hotel_cluster, 1))
# 6.2 best_hotels_search_dest
if(!is.na(srch_destination_id)&!is.na(hotel_country)&!is.na(hotel_market)&book_year==2014)
best_hotels_search_dest <- rbind(best_hotels_search_dest, c(srch_destination_id, hotel_country, hotel_market, hotel_cluster, append_1))
# 6.3 best_hotels_search_dest1
if(!is.na(srch_destination_id))
best_hotels_search_dest1 <- rbind(best_hotels_search_dest1, c(srch_destination_id, hotel_cluster, append_1))
# 6.4 best_hotel_country
if(!is.na(hotel_country))
best_hotel_country <- rbind(best_hotel_country, c(hotel_country, hotel_cluster, append_2))
popular_hotel_cluster <- rbind(popular_hotel_cluster, c(hotel_cluster, 1))
}
submit
a <- c(1,2,3,4,5)
a
head(best_hotel_country)
head(best_hotels_search_dest1)
head(best_hotels_od_ulc)
dim(best_hotels_od_ulc)
best_hotels_od_ulc <- best_hotels_od_ulc[!is.na(best_hotels_od_ulc$orig_destination_distance == -1), ]
dim(best_hotels_od_ulc)
head(best_hotels_od_ulc)
best_hotels_od_ulc <- best_hotels_od_ulc[best_hotels_od_ulc$orig_destination_distance != -1, ]
head(best_hotels_od_ulc)
dim(best_hotels_od_ulc)
best_hotels_od_ulc <- as.data.table(best_hotels_od_ulc)
best_hotels_od_ulc2 <- best_hotels_od_ulc[, score := sum(score), by = c(user_location_city, orig_destination_distance, hotel_cluster)]
best_hotels_od_ulc2 <- best_hotels_od_ulc[, score := sum(score), by = .(user_location_city, orig_destination_distance, hotel_cluster)]
best_hotels_od_ulc2
best_hotels_od_ulc2
